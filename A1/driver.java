package A1; /**
 * Driver class used to test the linearComplexity and exponentialComplexity
 * Student name: Xavier Guertin
 * Student id: 40213525
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;


public class driver {

    //path of where I want the report file to be created, you have to modify this path respectively to your system
    private static String resultsFile = "C:\\Users\\xavie\\OneDrive - Concordia University - Canada\\2nd year\\3rd session\\Workspace JB\\COMP-352\\A1\\Reports\\OddoOut.txt";

    public static void main(String[] args) {

        long startCounter; //counter for the start time counter
        long endCounter; //counter for the end time counter
        int[] oddonacciLinearRecursive_results = new int[800];      //declaring the array that will contain the results number for the linear recursive algorithm
        int[] oddonacciExponentialRecursive_results = new int[8];   //declaring the array that will contain the results number for the exponential recursive algorithm
        int[] oddonacciLinearTailRecursive_results = new int[800];  //declaring the array that will contain the results number for the linear tail-recursive algorithm
        int counter = 0; //counter for the for loops

        String numbers; //String of the numbers of the algorithms for the report
        StringBuilder sb = new StringBuilder(); //String builder to append the string "numbers"

        createReportFile(resultsFile);

        writeToReportFile(resultsFile, "This file has been generated by the driver's class. This class has been made by myself and myself only." +
                                    "\nStudent name: Xavier Guertin\nStudent number: 40213525\n\nThe program has started\n\n");

        //Start message
        System.out.println("The program has started. Please wait since it will take few seconds.");

        /**
         * Linear complexity algorithm
         */
        //Starting timer of the Oddonacci recursive linear complexity algorithm.
        startCounter = System.currentTimeMillis();

        //for loop that store every oddonacci number into an array that will be put in the report
        for (int i = 5; i<=4000 ; i += 5) {
            oddonacciLinearRecursive_results[counter] = (linearComplexity.oddonacciLinearRecursive(i))[2]; //takes the last value of the array which is the result
            counter ++;
        }

        //ends the counter
        endCounter = System.currentTimeMillis();

        //for loop that appends every oddonacci number to a string
        for (int i = 0; i<800; i++) {
            numbers = String.valueOf(oddonacciLinearRecursive_results[i]);
            sb.append(numbers + ", ");
        }

        //calls the function that writes the str to the report file
        writeToReportFile(resultsFile, "Oddonacci recursive linear complexity results: [START] {" + sb + "} [END]" +
                                    "\nThe execution time is: " + (endCounter - startCounter) + " ms\n\n");


        /**
         * Exponential complexity algorithm
         */
        //reset variables
        startCounter = 0;
        endCounter = 0;
        numbers = "";
        sb.setLength(0);
        counter = 0;

        //Starting timer of the Oddonacci recursive exponential complexity algorithm.
        startCounter = System.currentTimeMillis();

        //for loop that store every oddonacci number into an array that will be put in the report
        for (int i = 5; i<=40 ; i += 5) {
            oddonacciExponentialRecursive_results[counter] = (exponentialComplexity.oddonacciExponentialRecursive(i));
            counter ++;
        }

        //ends the counter
        endCounter = System.currentTimeMillis();

        //for loop that appends every oddonacci number to a string
        for (int i = 0; i<8; i++) {
            numbers = String.valueOf(oddonacciExponentialRecursive_results[i]);
            sb.append(numbers + ", ");
        }

        //calls the function that writes the str to the report file
        writeToReportFile(resultsFile, "Oddonacci recursive exponential complexity results: [START] {" + sb + "} [END]" +
                "\nThe execution time is: " + (endCounter - startCounter) + " ms\n\n");


        /**
         * Linear complexity algorithm - Tail recursive method
         */

        //reset variables
        startCounter = 0;
        endCounter = 0;
        numbers = "";
        sb.setLength(0);
        counter = 0;


        //Starting timer of the Oddonacci tail recursive linear complexity algorithm.
        startCounter = System.currentTimeMillis();

        //for loop that store every oddonacci number into an array that will be put in the report
        for (int i = 5; i<=4000 ; i += 5) {
            oddonacciLinearTailRecursive_results[counter] = (tailRecursive.oddonacciTailRecursive(i))[2]; //takes the last value of the array which is the result
            counter ++;
        }

        //ends the counter
        endCounter = System.currentTimeMillis();

        //for loop that appends every oddonacci number to a string
        for (int i = 0; i<800; i++) {
            numbers = String.valueOf(oddonacciLinearTailRecursive_results[i]);
            sb.append(numbers + ", ");
        }

        //calls the function that writes the str to the report file
        writeToReportFile(resultsFile, "Oddonacci tail recursive linear complexity results: [START] {" + sb + "} [END]" +
                "\nThe execution time is: " + (endCounter - startCounter) + " ms\n\n\n\n End of Program");

        System.out.println("The program has finished. You can now open the report file.");
    }

    private static void createReportFile (String reportName) {

        File reportFile = new File(reportName);

        if (reportFile.exists()) { //if report exists then delete it
            reportFile.delete();
        }

        try { //try-catch block to create the new file
            reportFile.createNewFile();
        } catch (IOException e) {
            System.out.println("There was a problem with the creation of the file: " + e.getMessage());
        }
    }
    private static void writeToReportFile(String fileName, String message) {

        BufferedWriter outStream = null;

        try { //try-catch block to write the message on the file
            outStream = new BufferedWriter(new FileWriter(fileName, true));
            outStream.write(message);
        } catch (IOException e) {
            System.out.println("There was a problem while writing on the file: " + e.getMessage());
        } finally {
            try {
                outStream.close(); //close stream buffer
            } catch (IOException e) {
                System.out.println("There was a problem while closing the stream: " + e.getMessage());
            }
        }
    }
}